import './NavBar.svelte.css.proxy.js';
/* src/NavBar.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import InlineSVG from "../_snowpack/pkg/svelte-inline-svg.js";
import { link } from "../_snowpack/pkg/svelte-spa-router.js";
import active from "../_snowpack/pkg/svelte-spa-router/active.js";
import menu from "../public/heroicons/outline/menu.svg.proxy.js";
import cross from "../public/heroicons/outline/x.svg.proxy.js";
import home from "../public/heroicons/solid/home.svg.proxy.js";

function create_if_block_1(ctx) {
	let inlinesvg;
	let current;

	inlinesvg = new InlineSVG({
			props: { src: menu, class: "h-6 w-6 fill-current" }
		});

	return {
		c() {
			create_component(inlinesvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinesvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(inlinesvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinesvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinesvg, detaching);
		}
	};
}

// (65:10) {#if isNavOpen}
function create_if_block(ctx) {
	let inlinesvg;
	let current;

	inlinesvg = new InlineSVG({
			props: {
				src: cross,
				class: "h-6 w-6 fill-current"
			}
		});

	return {
		c() {
			create_component(inlinesvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinesvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(inlinesvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinesvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinesvg, detaching);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let div3;
	let div1;
	let h1;
	let a0;
	let inlinesvg;
	let t0;
	let span;
	let link_action;
	let t2;
	let div0;
	let button;
	let t3;
	let t4;
	let div2;
	let nav;
	let a1;
	let link_action_1;
	let active_action;
	let t6;
	let a2;
	let link_action_2;
	let active_action_1;
	let t8;
	let a3;
	let link_action_3;
	let active_action_2;
	let t10;
	let a4;
	let link_action_4;
	let active_action_3;
	let t12;
	let a5;
	let link_action_5;
	let active_action_4;
	let t14;
	let a6;
	let link_action_6;
	let active_action_5;
	let div2_class_value;
	let current;
	let mounted;
	let dispose;

	inlinesvg = new InlineSVG({
			props: {
				src: home,
				class: "h-6 w-6 fill-current inline-block mr-1"
			}
		});

	let if_block0 = !/*isNavOpen*/ ctx[0] && create_if_block_1(ctx);
	let if_block1 = /*isNavOpen*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			header = element("header");
			div3 = element("div");
			div1 = element("div");
			h1 = element("h1");
			a0 = element("a");
			create_component(inlinesvg.$$.fragment);
			t0 = space();
			span = element("span");
			span.textContent = "Aastha Khatiwada";
			t2 = space();
			div0 = element("div");
			button = element("button");
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div2 = element("div");
			nav = element("nav");
			a1 = element("a");
			a1.textContent = "Home";
			t6 = space();
			a2 = element("a");
			a2.textContent = "Publication";
			t8 = space();
			a3 = element("a");
			a3.textContent = "Teaching";
			t10 = space();
			a4 = element("a");
			a4.textContent = "Software";
			t12 = space();
			a5 = element("a");
			a5.textContent = "Project";
			t14 = space();
			a6 = element("a");
			a6.textContent = "CV";
			attr(a0, "href", "/");
			attr(a0, "class", "flex items-center");
			attr(h1, "class", "text-gray-100 text-2xl font-semibold flex-shrink-0 hover:text-blue-100");
			attr(button, "type", "button");
			attr(button, "class", "text-gray-300 focus:text-white hover:text-white");
			attr(div0, "class", "md:hidden");
			attr(div1, "class", "flex items-center justify-between px-4 py-3 md:p-0");
			attr(a1, "href", "/");
			attr(a1, "class", "nav-item svelte-qrmxxn");
			attr(a2, "href", "/publication");
			attr(a2, "class", "nav-item svelte-qrmxxn");
			attr(a3, "href", "/teaching");
			attr(a3, "class", "nav-item svelte-qrmxxn");
			attr(a4, "href", "/software");
			attr(a4, "class", "nav-item svelte-qrmxxn");
			attr(a5, "href", "/project");
			attr(a5, "class", "nav-item svelte-qrmxxn");
			attr(a6, "href", "/cv");
			attr(a6, "class", "nav-item svelte-qrmxxn");
			attr(nav, "class", "px-2 pt-2 pb-4 md:flex md:p-0");
			attr(div2, "class", div2_class_value = "" + ((/*isNavOpen*/ ctx[0] ? "block" : "hidden") + " md:block"));
			attr(div3, "class", "max-w-screen-lg m-auto md:flex md:justify-between md:px-4 md:py-3 md:pr-3 md:justify-center");
			attr(header, "class", "dark:bg-gray-800 bg-gray-600 fixed w-screen");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			append(header, div3);
			append(div3, div1);
			append(div1, h1);
			append(h1, a0);
			mount_component(inlinesvg, a0, null);
			append(a0, t0);
			append(a0, span);
			append(div1, t2);
			append(div1, div0);
			append(div0, button);
			if (if_block0) if_block0.m(button, null);
			append(button, t3);
			if (if_block1) if_block1.m(button, null);
			append(div3, t4);
			append(div3, div2);
			append(div2, nav);
			append(nav, a1);
			append(nav, t6);
			append(nav, a2);
			append(nav, t8);
			append(nav, a3);
			append(nav, t10);
			append(nav, a4);
			append(nav, t12);
			append(nav, a5);
			append(nav, t14);
			append(nav, a6);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a0)),
					listen(button, "click", /*toggleNav*/ ctx[1]),
					action_destroyer(link_action_1 = link.call(null, a1)),
					action_destroyer(active_action = active.call(null, a1, { className: "nav-item-active" })),
					action_destroyer(link_action_2 = link.call(null, a2)),
					action_destroyer(active_action_1 = active.call(null, a2, { className: "nav-item-active" })),
					action_destroyer(link_action_3 = link.call(null, a3)),
					action_destroyer(active_action_2 = active.call(null, a3, { className: "nav-item-active" })),
					action_destroyer(link_action_4 = link.call(null, a4)),
					action_destroyer(active_action_3 = active.call(null, a4, { className: "nav-item-active" })),
					action_destroyer(link_action_5 = link.call(null, a5)),
					action_destroyer(active_action_4 = active.call(null, a5, { className: "nav-item-active" })),
					action_destroyer(link_action_6 = link.call(null, a6)),
					action_destroyer(active_action_5 = active.call(null, a6, { className: "nav-item-active" }))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*isNavOpen*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*isNavOpen*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(button, t3);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*isNavOpen*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*isNavOpen*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(button, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*isNavOpen*/ 1 && div2_class_value !== (div2_class_value = "" + ((/*isNavOpen*/ ctx[0] ? "block" : "hidden") + " md:block"))) {
				attr(div2, "class", div2_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(inlinesvg.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(inlinesvg.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			destroy_component(inlinesvg);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isNavOpen = false;

	function toggleNav() {
		$$invalidate(0, isNavOpen = !isNavOpen);
	}

	return [isNavOpen, toggleNav];
}

class NavBar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default NavBar;